{"version":3,"sources":["perlin.js","main.js"],"names":["global","module","noise","Grad","x","y","z","prototype","dot2","dot3","grad3","p","perm","Array","gradP","seed","Math","floor","i","v","F2","sqrt","G2","G3","fade","t","lerp","a","b","simplex2","xin","yin","n0","i1","j1","s","j","x0","y0","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","simplex3","zin","k1","i2","j2","k2","k","z0","z1","z2","x3","y3","z3","gi3","t3","perlin2","X","Y","n00","n01","n10","n11","u","perlin3","Z","n000","n001","n010","n011","n100","n101","n110","n111","w","TILE_SIZE","STAR_SIZE_MAX","STARS_PER_TILE","DISPLACEMENT_WIDTH","DISPLACEMENT_HEIGHT","displacementAmount","screenTexture","random","document","addEventListener","body","e","key","console","log","scrollWidth","scrollHeight","displacementCanvas","createElement","displacementContext","getContext","id","width","height","displacementMap","createImageData","noises","di","max","shade","size","length","data","putImageData","windowWidth","windowHeight","colCount","ceil","rowCount","tileCanvas","tileContext","spaceNoises","spaceMap","fraction","spaceMapCanvas","style","position","zIndex","fillStyle","fillRect","round","stars","getImageData","screenTextureCanvas","screenTextureContext","baseTextureWidth","baseTextureHeight","row","col","baseScreenTexture","screenCanvas","screenContext","appendChild","offset","frameScreenTexture","requestAnimationFrame","frame","pixNum","outputIndex","displacementIndex","displacement","dOffset","displacedRow","min","displacedCol","displacedIndex"],"mappings":"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","file":"main.b8b9223e.map","sourceRoot":"..","sourcesContent":["/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\n(function(global){\n  var module = global.noise = {};\n\n  function Grad(x, y, z) {\n    this.x = x; this.y = y; this.z = z;\n  }\n  \n  Grad.prototype.dot2 = function(x, y) {\n    return this.x*x + this.y*y;\n  };\n\n  Grad.prototype.dot3 = function(x, y, z) {\n    return this.x*x + this.y*y + this.z*z;\n  };\n\n  var grad3 = [new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),\n               new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),\n               new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)];\n\n  var p = [151,160,137,91,90,15,\n  131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n  190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n  88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n  77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n  102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n  135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n  5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n  223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n  129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n  251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n  49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n  138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];\n  // To remove the need for index wrapping, double the permutation table length\n  var perm = new Array(512);\n  var gradP = new Array(512);\n\n  // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n  module.seed = function(seed) {\n    if(seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n\n    seed = Math.floor(seed);\n    if(seed < 256) {\n      seed |= seed << 8;\n    }\n\n    for(var i = 0; i < 256; i++) {\n      var v;\n      if (i & 1) {\n        v = p[i] ^ (seed & 255);\n      } else {\n        v = p[i] ^ ((seed>>8) & 255);\n      }\n\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = grad3[v % 12];\n    }\n  };\n\n  module.seed(0);\n\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n  var F2 = 0.5*(Math.sqrt(3)-1);\n  var G2 = (3-Math.sqrt(3))/6;\n\n  var F3 = 1/3;\n  var G3 = 1/6;\n\n  // 2D simplex noise\n  module.simplex2 = function(xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin+yin)*F2; // Hairy factor for 2D\n    var i = Math.floor(xin+s);\n    var j = Math.floor(yin+s);\n    var t = (i+j)*G2;\n    var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin-j+t;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if(x0>y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1=1; j1=0;\n    } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1=0; j1=1;\n    }\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n    var y2 = y0 - 1 + 2 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    i &= 255;\n    j &= 255;\n    var gi0 = gradP[i+perm[j]];\n    var gi1 = gradP[i+i1+perm[j+j1]];\n    var gi2 = gradP[i+1+perm[j+1]];\n    // Calculate the contribution from the three corners\n    var t0 = 0.5 - x0*x0-y0*y0;\n    if(t0<0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1*x1-y1*y1;\n    if(t1<0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n    var t2 = 0.5 - x2*x2-y2*y2;\n    if(t2<0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70 * (n0 + n1 + n2);\n  };\n\n  // 3D simplex noise\n  module.simplex3 = function(xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin+yin+zin)*F3; // Hairy factor for 2D\n    var i = Math.floor(xin+s);\n    var j = Math.floor(yin+s);\n    var k = Math.floor(zin+s);\n\n    var t = (i+j+k)*G3;\n    var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin-j+t;\n    var z0 = zin-k+t;\n\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n    if(x0 >= y0) {\n      if(y0 >= z0)      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }\n      else if(x0 >= z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }\n      else              { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }\n    } else {\n      if(y0 < z0)      { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }\n      else if(x0 < z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }\n      else             { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3;\n\n    // Work out the hashed gradient indices of the four simplex corners\n    i &= 255;\n    j &= 255;\n    k &= 255;\n    var gi0 = gradP[i+   perm[j+   perm[k   ]]];\n    var gi1 = gradP[i+i1+perm[j+j1+perm[k+k1]]];\n    var gi2 = gradP[i+i2+perm[j+j2+perm[k+k2]]];\n    var gi3 = gradP[i+ 1+perm[j+ 1+perm[k+ 1]]];\n\n    // Calculate the contribution from the four corners\n    var t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;\n    if(t0<0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;\n    if(t1<0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n    var t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;\n    if(t2<0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n    var t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;\n    if(t3<0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 32 * (n0 + n1 + n2 + n3);\n\n  };\n\n  // ##### Perlin noise stuff\n\n  function fade(t) {\n    return t*t*t*(t*(t*6-15)+10);\n  }\n\n  function lerp(a, b, t) {\n    return (1-t)*a + t*b;\n  }\n\n  // 2D Perlin Noise\n  module.perlin2 = function(x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x), Y = Math.floor(y);\n    // Get relative xy coordinates of point within that cell\n    x = x - X; y = y - Y;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255; Y = Y & 255;\n\n    // Calculate noise contributions from each of the four corners\n    var n00 = gradP[X+perm[Y]].dot2(x, y);\n    var n01 = gradP[X+perm[Y+1]].dot2(x, y-1);\n    var n10 = gradP[X+1+perm[Y]].dot2(x-1, y);\n    var n11 = gradP[X+1+perm[Y+1]].dot2(x-1, y-1);\n\n    // Compute the fade curve value for x\n    var u = fade(x);\n\n    // Interpolate the four results\n    return lerp(\n        lerp(n00, n10, u),\n        lerp(n01, n11, u),\n       fade(y));\n  };\n\n  // 3D Perlin Noise\n  module.perlin3 = function(x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n    // Get relative xyz coordinates of point within that cell\n    x = x - X; y = y - Y; z = z - Z;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255; Y = Y & 255; Z = Z & 255;\n\n    // Calculate noise contributions from each of the eight corners\n    var n000 = gradP[X+  perm[Y+  perm[Z  ]]].dot3(x,   y,     z);\n    var n001 = gradP[X+  perm[Y+  perm[Z+1]]].dot3(x,   y,   z-1);\n    var n010 = gradP[X+  perm[Y+1+perm[Z  ]]].dot3(x,   y-1,   z);\n    var n011 = gradP[X+  perm[Y+1+perm[Z+1]]].dot3(x,   y-1, z-1);\n    var n100 = gradP[X+1+perm[Y+  perm[Z  ]]].dot3(x-1,   y,   z);\n    var n101 = gradP[X+1+perm[Y+  perm[Z+1]]].dot3(x-1,   y, z-1);\n    var n110 = gradP[X+1+perm[Y+1+perm[Z  ]]].dot3(x-1, y-1,   z);\n    var n111 = gradP[X+1+perm[Y+1+perm[Z+1]]].dot3(x-1, y-1, z-1);\n\n    // Compute the fade curve value for x, y, z\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z);\n\n    // Interpolate\n    return lerp(\n        lerp(\n          lerp(n000, n100, u),\n          lerp(n001, n101, u), w),\n        lerp(\n          lerp(n010, n110, u),\n          lerp(n011, n111, u), w),\n       v);\n  };\n\n})(this);\n","import { noise } from './perlin';\n\nconst TILE_SIZE = 256;\nconst STAR_SIZE_MAX = 3;\nconst STARS_PER_TILE = 70;\n\nconst DISPLACEMENT_WIDTH = 300;\nconst DISPLACEMENT_HEIGHT = 300;\nlet displacementAmount = 25;\n\nlet screenTexture = null;\n\nnoise.seed(Math.random());\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  document.body.addEventListener('keypress', function (e) {\n    if (e.key == 'a') {\n      displacementAmount -= 10;\n    } else if (e.key == 'd') {\n      displacementAmount += 10;\n    }\n  });\n\n  console.log(document.body.scrollWidth, document.body.scrollHeight);\n\n  const displacementCanvas = document.createElement('canvas');\n  const displacementContext = displacementCanvas.getContext('2d');\n\n  displacementCanvas.id = 'displacement';\n  displacementCanvas.width = DISPLACEMENT_WIDTH;\n  displacementCanvas.height = DISPLACEMENT_HEIGHT;\n\n  let displacementMap = displacementContext.createImageData(DISPLACEMENT_WIDTH, DISPLACEMENT_HEIGHT);\n\n  let noises = [200, 250, 500]\n\n  for (let di = 0, max = DISPLACEMENT_WIDTH * DISPLACEMENT_HEIGHT * 4; di < max; di += 4) {\n    let x = di % (DISPLACEMENT_WIDTH * 4);\n    let y = Math.floor(di / (DISPLACEMENT_WIDTH * 4)) * 2; // Looks better if *2 for some reason?\n\n    let shade = 0;\n    for (let size of noises) {\n      shade += 255 * noise.perlin2(x / size, y / size);\n    }\n    shade /= noises.length;\n    // shade = (shade + 128) / 2;\n\n    displacementMap.data[di] = shade;\n    displacementMap.data[di + 1] = shade;\n    displacementMap.data[di + 2] = shade;\n    displacementMap.data[di + 3] = 255;\n  }\n\n  displacementContext.putImageData(displacementMap, 0, 0);\n\n  const windowWidth = document.body.scrollWidth / 2;\n  const windowHeight = document.body.scrollHeight / 2;\n\n  const colCount = Math.ceil(windowWidth / TILE_SIZE);\n  const rowCount = Math.ceil(windowHeight / TILE_SIZE);\n\n  const tileCanvas = document.createElement('canvas');\n  const tileContext = tileCanvas.getContext('2d');\n\n  tileCanvas.width = TILE_SIZE;\n  tileCanvas.height = TILE_SIZE;\n\n  // Generate texture for background of space;\n\n  let spaceMap = tileContext.createImageData(TILE_SIZE, TILE_SIZE);\n\n  let spaceNoises = [32, 64, 128, 256, 512];\n\n  let fraction = 0.4 / spaceNoises.length;\n\n  for (let size of spaceNoises) {\n    noise.seed(Math.random());\n    for (let di = 0, max = TILE_SIZE * TILE_SIZE * 4; di < max; di += 4) {\n      let x = di % (TILE_SIZE * 4);\n      let y = Math.floor(di / (TILE_SIZE * 4)) * 2; // Looks better if *2 for some reason?\n\n      let shade = 255 * noise.perlin2(x / size, y / size);\n\n      spaceMap.data[di] += shade * fraction;\n      spaceMap.data[di + 1] += shade * fraction;\n      spaceMap.data[di + 2] += shade * fraction;\n      spaceMap.data[di + 3] = 255;\n    }\n  }\n\n  const spaceMapCanvas = document.createElement('canvas');\n  spaceMapCanvas.width = TILE_SIZE;\n  spaceMapCanvas.height = TILE_SIZE;\n  const spaceMapContext = spaceMapCanvas.getContext('2d');\n  spaceMapContext.putImageData(spaceMap, 0, 0);\n  spaceMapCanvas.style.position = 'relative';\n  spaceMapCanvas.style.zIndex = 100;\n\n  tileContext.putImageData(spaceMap, 0, 0);\n\n  tileContext.fillStyle = '#000000';\n  // tileContext.fillRect(0, 0, TILE_SIZE, TILE_SIZE);\n\n  tileContext.fillStyle = '#ffffff';\n  for (let j = 0; j < STARS_PER_TILE; j++) {\n    tileContext.fillRect(\n      Math.random() * TILE_SIZE,\n      Math.random() * TILE_SIZE, \n      Math.round(STAR_SIZE_MAX * Math.random()),\n      Math.round(STAR_SIZE_MAX * Math.random())\n    );\n  }\n\n  const stars = tileContext.getImageData(0, 0, TILE_SIZE, TILE_SIZE);\n\n\n  const screenTextureCanvas = document.createElement('canvas');\n  const screenTextureContext = screenTextureCanvas.getContext('2d');\n\n  const baseTextureWidth = windowWidth + TILE_SIZE;\n  const baseTextureHeight = windowHeight + TILE_SIZE;\n\n  screenTextureCanvas.width = baseTextureWidth;\n  screenTextureCanvas.height = baseTextureHeight;\n\n  for (let row = 0; row < rowCount + 1; row++) {\n    for (let col = 0; col < colCount + 1; col++) {\n      screenTextureContext.putImageData(\n        stars,\n        col * TILE_SIZE,\n        row * TILE_SIZE\n      );\n    }\n  }\n\n  const baseScreenTexture = screenTextureContext.getImageData(\n    0, 0, baseTextureWidth, baseTextureHeight\n  );\n\n  const screenCanvas = document.createElement('canvas');\n  const screenContext = screenCanvas.getContext('2d');\n  \n  screenCanvas.width = windowWidth;\n  screenCanvas.height = windowHeight;\n  screenCanvas.id = 'stars';\n\n  document.body.appendChild(screenCanvas);\n\n  let offset = 0;\n\n  const frameScreenTexture = screenContext.createImageData(\n    baseScreenTexture.width,\n    baseScreenTexture.height\n  );\n\n  requestAnimationFrame(function frame() {\n    offset += 1;\n    offset %= TILE_SIZE;\n\n    // Yuck! Manual on each pixel\n    // How do I get it so we don't consider the offset :thinking:\n    // Offset is in both left and top... :/ \n\n    for (let pixNum = 0; pixNum < frameScreenTexture.data.length / 4; pixNum++) {\n      let outputIndex = pixNum * 4;\n      let row = Math.floor(pixNum / frameScreenTexture.width);\n      let col = pixNum % frameScreenTexture.width;\n\n      let sRow = row + offset;\n      let sCol = col + offset;\n\n      let displacementCol = sCol % DISPLACEMENT_WIDTH;\n      let displacementRow = sRow % DISPLACEMENT_HEIGHT;\n      let displacementIndex = ((displacementRow * DISPLACEMENT_WIDTH) + displacementCol) * 4;\n      let displacement = displacementMap.data[displacementIndex] - 128;\n\n      let dOffset = Math.round(displacement / 128 * displacementAmount);\n      let displacedRow = Math.max(0, Math.min(row - dOffset, baseScreenTexture.height - 1));\n      let displacedCol = Math.max(0, Math.min(col + dOffset, baseScreenTexture.width - 1));\n      let displacedIndex = (displacedRow * baseScreenTexture.width + displacedCol) * 4;\n\n      frameScreenTexture.data[outputIndex] = baseScreenTexture.data[displacedIndex];\n      frameScreenTexture.data[outputIndex + 1] = baseScreenTexture.data[displacedIndex + 1];\n      frameScreenTexture.data[outputIndex + 2] = baseScreenTexture.data[displacedIndex + 2];\n      frameScreenTexture.data[outputIndex + 3] = 255;\n    }\n\n    screenContext.putImageData(\n      frameScreenTexture, offset - TILE_SIZE, offset - TILE_SIZE\n    );\n\n    requestAnimationFrame(frame);\n  })\n})\n\n"]}